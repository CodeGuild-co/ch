{% extends "masterfile.html" %}
{% block content %}
<div class="container">
    <h3>Problem Solving</h3><br>
    <p class="btext">When problem solving, the first thing you need to think about is splitting up the problem into small chunks of tasks so that you can focus on specific things. For example Bill used to example of Fibonacci sequence generator. One task of this would be to make use you understand the fibonacci sequence, as well as knowing how to create it within code. You would also have to communicate with your team in a professional world and each take certain tasks, which means making sure everyone is coding in the same language for example one person can’t code in Java and another in C++, it just won’t work. Finally in my opinion it’s also good to communicate about how you feel about specific tasks such as if one person felt they could create the fibonacci sequence part and the other one didn’t feel confident on that part, but they felt confident about validating inputs etc. This would benefit everyone as the problem is more likely to be solved more quickly and efficiently.
</p>
    <p class="btext">To me, being lazy means that you don’t create work for yourself that doesn’t need to be done. Bill explained this quite well by saying that if there is a function for the fibonacci sequence already, it would be better just to copy paste that function so that you don’t waste time. However you need to be careful that the code will work with your current code and variable names might have to be changed. Next Bill talked about KISS, meaning keep it simple stupid. This to me means making sure that you name variables correctly and not giving weird names that only makes sense to you. The chances are that someone else is probably going to read your code at one point, especially if you are on a team so keeping it readable and simple is imperative. Following this we learnt about DRY, standing for don’t repeat yourself. I don’t really need to explain this as it’s quite simple, just make sure that if you are about to copy paste the same code you have already used, just make a function for it. I personally think this intertwines with KISS as you are making your code look much more simple. Finally we discussed the balance between brute forcing and making your code efficient. Sometimes it’s better to spend a day on a problem not brute forcing it so that in a week you don’t have to come back and make it more efficient which could take weeks. Sometimes it’s hard to see the balance.between completing the task as efficiently as possible (meaning when it runs it’s as quick as it can get ) and just brute forcing it.</p>
    <p class="btext"></p>
</div>
{% endblock %}

